{"version":3,"sources":["app/hooks.ts","features/counter/counterSlice.ts","features/counter/Counter.tsx","components/nav-bar/NavBar.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx","features/counter/Counter.module.css"],"names":["useAppSelector","useSelector","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","resetCounter","actions","selectCount","counter","Counter","count","dispatch","useDispatch","useState","incrementAmount","setIncrementAmount","incrementValue","Number","dispatchToApp","useCallback","window","open","className","styles","row","button","aria-label","onClick","textbox","onChange","e","target","NavBar","location","useLocation","currentPath","useMemo","pathname","to","style","backgroundColor","undefined","type","disabled","App","path","store","configureStore","reducer","counterReducer","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.b5a4f4dc.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport {RootState} from '../../app/store';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n    // Reset action\n    resetCounter: (state) => {\n      state.value = 0;\n    }\n  },\n});\n\nexport const {increment, decrement, incrementByAmount, resetCounter} = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\nexport default counterSlice.reducer;\n","import React, {useCallback, useState} from 'react';\n\nimport {useAppSelector, useAppDispatch} from '../../app/hooks';\nimport {\n  decrement,\n  increment,\n  incrementByAmount,\n  selectCount,\n  resetCounter\n} from './counterSlice';\nimport styles from './Counter.module.css';\n\nexport function Counter() {\n  const count = useAppSelector(selectCount);\n  const dispatch = useAppDispatch();\n  const [incrementAmount, setIncrementAmount] = useState('2');\n\n  const incrementValue = Number(incrementAmount) || 0;\n\n  const dispatchToApp = useCallback(() => {\n    window.open(`valeo-mobile://counter/${count}`, \"_blank\")\n    dispatch(resetCounter())\n  }, [count, dispatch])\n\n  return (\n    <div>\n      <h3>\n        Modify this value\n      </h3>\n      <div className={styles.row}>\n        <button\n          className={styles.button}\n          aria-label=\"Decrement value\"\n          onClick={() => dispatch(decrement())}\n        >\n          -\n        </button>\n        <span className={styles.value}>{count}</span>\n        <button\n          className={styles.button}\n          aria-label=\"Increment value\"\n          onClick={() => dispatch(increment())}\n        >\n          +\n        </button>\n      </div>\n      <h4>Or insert a number to add to the counter. A positive or negative value.</h4>\n      <div className={styles.row}>\n        <input\n          className={styles.textbox}\n          aria-label=\"Set increment amount\"\n          value={incrementAmount}\n          onChange={(e) => setIncrementAmount(e.target.value)}\n        />\n        <button\n          className={styles.button}\n          onClick={() => dispatch(incrementByAmount(incrementValue))}\n        >\n          Add Amount\n        </button>\n      </div>\n      <div className={styles.row}>\n        <button\n          className={styles.button}\n          onClick={dispatchToApp}\n        >\n          Transfer to Phone App\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React, {FC, useMemo} from \"react\";\nimport {Link, useLocation} from \"react-router-dom\";\nimport styles from \"../../features/counter/Counter.module.css\";\n\nconst NavBar: FC<{}> = () => {\n  const location = useLocation();\n  const currentPath = useMemo(() => location.pathname, [location])\n\n  return (\n    <nav>\n      <Link to=\"/\">\n        <button\n          className={styles.button}\n          style={currentPath === '/' ? {backgroundColor: 'rgba(112, 76, 182, 0.2)'} : undefined}\n          type={\"button\"}\n          disabled={currentPath === '/'}\n        >\n          Home\n        </button>\n      </Link>\n      <Link to=\"/counter\">\n        <button\n          className={styles.button}\n          type={\"button\"}\n          style={currentPath === '/counter' ? {backgroundColor: 'rgba(112, 76, 182, 0.2)'} : undefined}\n          disabled={currentPath === '/counter'}\n        >\n          Counter\n        </button>\n      </Link>\n    </nav>\n  )\n}\n\nexport default NavBar;\n","import React from 'react';\nimport {Counter} from './features/counter/Counter';\nimport './App.css';\nimport {\n  Switch,\n  Route,\n  BrowserRouter as Router\n} from \"react-router-dom\";\nimport NavBar from \"./components/nav-bar/NavBar\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <NavBar/>\n        <header className=\"App-header\">\n          <div>\n            <Switch>\n              <Route path=\"/counter\">\n                <Counter/>\n              </Route>\n              <Route path=\"/\">\n                <h2>Welcome to Valeo Service test web application</h2>\n              </Route>\n            </Switch>\n          </div>\n        </header>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {store} from './app/store';\nimport {Provider} from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__1C_4f\",\"value\":\"Counter_value__1d0te\",\"button\":\"Counter_button__1xpSV\",\"textbox\":\"Counter_textbox__3ODaX\"};"],"sourceRoot":""}